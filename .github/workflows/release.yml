name: Release

on:
  push:
    tags:
      - "*"

env:
  CX_BASE_URI: ${{ secrets.CX_BASE_URI }}
  CX_APIKEY: ${{ secrets.CX_APIKEY }}
  CX_TENANT: ${{ secrets.CX_TENANT }}
  CX_TEST_REPO: ${{ secrets.CX_TEST_REPO }}
  CX_TEST_SCAN: ${{ secrets.CX_TEST_SCAN }}
  CX_TEST_BRANCH: ${{ secrets.CX_TEST_BRANCH }}
  CX_TEST_PROJECT: ${{ secrets.CX_TEST_PROJECT }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Checkout Code
        uses: actions/checkout@v3
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.4.0
        with:
          distribution: zulu
          java-version: 11
      # Run verifier
      - name: Run plugin verifier
        run: ./gradlew runPluginVerifier
      # Upload verifier report
      - name: Upload report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: verifier-report
          path: build/reports/pluginVerifier
  testIntegration:
    needs: [ verify ]
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.4.0
        with:
          distribution: zulu
          java-version: 11
      # Perform clean before testing
      - name: Clean
        run: ./gradlew clean
      # Run tests
      - name: Tests
        run: ./gradlew test -i --tests com.checkmarx.intellij.standard*
      # Save report if tests fail
      - name: Save fails report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-fails-report-integration
          path: |
            build/reports
  testUI:
    needs: [ testIntegration ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        include:
          - os: ubuntu-latest
            runIde: |
              export DISPLAY=:99.0
              Xvfb -ac :99 -screen 0 1920x1080x24 &
              ./gradlew -i runIdeForUiTests > idea.log 2>&1 &
            runTests: |
              export DISPLAY=:99.0
              ./gradlew test --info --tests com.checkmarx.intellij.ui*
            report-name: test-fails-report-linux
            report-path: build/reports
            idea-log: idea-linux.log
            curl: curl
          - os: windows-latest
            runIde: |
              Set-DisplayResolution -Width 1920 -Height 1080 -Force
              start .\runIdeForUiTests.bat
            runTests: |
              Set-DisplayResolution -Width 1920 -Height 1080 -Force
              ./gradlew test -PuiWaitDuration=800 --info --tests com.checkmarx.intellij.ui*
            report-name: test-fails-report-windows
            report-path: build/reports
            idea-log: idea-windows.log
            curl: curl.exe
          - os: macos-latest
            runIde: |
              "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080
              ./gradlew -i runIdeForUiTests > idea.log 2>&1 &
            runTests: ./gradlew test -PuiWaitDuration=800 --info --tests com.checkmarx.intellij.ui*
            report-name: test-fails-report-mac
            report-path: build/reports
            idea-log: idea-mac.log
            curl: curl
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.4.0
        with:
          distribution: zulu
          java-version: 11
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1
        with:
          # Not strictly necessary, but it may prevent rate limit
          # errors especially on GitHub-hosted macos machines.
          token: ${{ secrets.GITHUB_TOKEN }}
      # Perform clean before testing
      - name: Clean
        run: ./gradlew clean
      # Run IDEA prepared for UI testing
      - name: Run IDE
        run: ${{ matrix.runIde }}
      # Wait for IDEA to be started
      - name: Health Check
        run: ${{ matrix.curl }} --fail -sv --retry "15" --retry-delay "15" --retry-connrefused "http://127.0.0.1:8580"
      # Run tests
      - name: Tests
        run: ${{ matrix.runTests }}
      - name: Move video
        if: ${{ failure() }}
        run: mv video ${{ matrix.report-path }}
      # Save report if tests fail
      - name: Save fails report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.report-name }}
          path: |
            ${{ matrix.report-path }}
      # Save idea log if tests fail
      - name: Save idea log
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.idea-log }}
          path: |
            idea.log
  release:
    needs: [ testUI ]
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.4.0
        with:
          distribution: zulu
          java-version: 11
      # Set the tag in an env var
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      # Build plugin
      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew buildPlugin --info
      # Create the release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          files: build/distributions/*
      # Publish the plugin in marketplace
      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
        run: ./gradlew publishPlugin
