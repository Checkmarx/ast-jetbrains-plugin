name: AST Jetbrains Plugin CI

on: [ pull_request, workflow_dispatch ]

env:
  CX_BASE_URI: ${{ secrets.CX_BASE_URI }}
  CX_APIKEY: ${{ secrets.CX_APIKEY }}
  CX_TENANT: ${{ secrets.CX_TENANT }}
  CX_TEST_REPO: ${{ secrets.CX_TEST_REPO }}
  CX_TEST_SCAN: ${{ secrets.CX_TEST_SCAN }}
  CX_TEST_BRANCH: ${{ secrets.CX_TEST_BRANCH }}
  CX_TEST_PROJECT: ${{ secrets.CX_TEST_PROJECT }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  testUI:
    needs: [ testIntegration ]
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.3.0
        with:
          distribution: zulu
          java-version: 11
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1
        with:
          # Not strictly necessary, but it may prevent rate limit
          # errors especially on GitHub-hosted macos machines.
          token: ${{ secrets.GITHUB_TOKEN }}
      # Perform clean before testing
      - name: Clean
        run: ./gradlew clean
      # Run IDEA prepared for UI testing
      - name: Run IDE
        run: |
          mkdir -p build/reports
          export DISPLAY=:99.0
          Xvfb -ac :99 -screen 0 1920x1080x24 &
          sleep 10
          ./gradlew -i runIdeForUiTests > idea.log 2>&1 &
      # Wait for IDEA to be started
      - name: Health Check
        run: curl --fail -sv --retry "15" --retry-delay "10" --retry-connrefused "http://127.0.0.1:8580"
      # Run tests
      - name: Tests
        run: |
          export DISPLAY=:99.0
          ./gradlew test --info --tests com.checkmarx.intellij.ui*
      - name: Move video
        if: ${{ failure() }}
        run: mv video build/reports
      # Save report if tests fail
      - name: Save fails report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-fails-report
          path: |
            build/reports
      # Save idea log if tests fail
      - name: Save idea log
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: idea.log
          path: |
            idea.log
  testIntegration:
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.3.0
        with:
          distribution: zulu
          java-version: 11
      # Perform clean before testing
      - name: Clean
        run: ./gradlew clean
      # Run tests
      - name: Tests
        run: ./gradlew test -i --tests com.checkmarx.intellij.standard*
      # Save report if tests fail
      - name: Save fails report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-fails-report-integration
          path: |
            build/reports

      - name: Run Test Coverage
        run: ./gradlew jacocoTestReport

      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: build/reports/jacoco/

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            git add *.svg *.json
            git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
            git push
          fi

      - name: Comment on PR with coverage percentages
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          REPORT=$(<badges/coverage-summary.json)
          COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
          BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
          NEWLINE=$'\n'
          BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
          gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
